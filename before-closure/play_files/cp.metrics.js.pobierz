var _____WB$wombat$assign$function_____ = function(name) {return (self._wb_wombat && self._wb_wombat.local_init && self._wb_wombat.local_init(name)) || self[name]; };
if (!self.__WB_pmw) { self.__WB_pmw = function(obj) { this.__WB_source = obj; return this; } }
{
  let window = _____WB$wombat$assign$function_____("window");
  let self = _____WB$wombat$assign$function_____("self");
  let document = _____WB$wombat$assign$function_____("document");
  let location = _____WB$wombat$assign$function_____("location");
  let top = _____WB$wombat$assign$function_____("top");
  let parent = _____WB$wombat$assign$function_____("parent");
  let frames = _____WB$wombat$assign$function_____("frames");
  let opener = _____WB$wombat$assign$function_____("opener");

if (typeof CP === 'undefined') {
	var CP = {};
}

(function($) {

	CP.metrics = function(options) {
		var hostName = window.location.hostname, swid, prefix;
		this.initOptions();
		$.extend(true, this.options, options);

		if (this.options.TRANSID === '-1') {
			transid = getCookie('playspanTRANSID');
		}

		if (transid && transid !== "null") {
			this.options.TRANSID = transid;
		}
				
		//If we still have '-1' or "null" assign unique identifier
		if (this.options.TRANSID === '-1' || this.options.TRANSID === "null") {
			//Generate a GUID 
			transid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8); return v.toString(16); });
			this.options.TRANSID = transid;
			try {
				setCookie('playspanTRANSID', transid);
			} catch (e) {
			}
		}
		
		if (this.options.BROWSERID === '-1') {
			browserid = getCookie('cpBROWSERID');
		}

		if (browserid && browserid !== "null") {
			this.options.BROWSERID = browserid;
		}
		
		//If we still have '-1' or "null" assign unique identifier
		if (this.options.BROWSERID === '-1' || this.options.BROWSERID === "null") {
			//Generate a GUID 
			browserid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) { var r = Math.random()*16|0, v = c == 'x' ? r : (r&0x3|0x8); return v.toString(16); });
			try {
				setCookie('cpBROWSERID', browserid, 365);
			} catch (e) {
			}
		}
		
		if (this.options.SWID === '-1') {
			swid = getCookie('playspanSWID');
		}

		if (swid && swid !== "null") {
			this.options.SWID = swid;
		}
		if (!this.options.CONTEXT_PREFIX) {
			prefix = getCookie('contextVariant') || 'purchase_funnel_';
			this.setContextVariant(prefix);
		}

		if (hostName.indexOf("stage") >= 0 || hostName.indexOf("sandbox") >= 0 || hostName.indexOf("qa") >= 0 || hostName.indexOf("dev") >= 0) {
			this.options.API_APP_NAME = "qa_" + this.options.API_APP_NAME;
		}
		if (document.documentElement.lang) {
			this.options.APP_LOCALE = document.documentElement.lang.toLowerCase().substr(0, 2);
		}

		switch (this.options.APP_LOCALE) {
			case "en":
				this.options.APP_LOCALE += "_US";
				break;
			case "pt":
				this.options.APP_LOCALE += "_BR";
				break;
			case "fr":
				this.options.APP_LOCALE += "_FR";
				break;
			case "es":
				this.options.APP_LOCALE += "_ES";
				break;
			case "de":
				this.options.APP_LOCALE += "_DE";
				break;
		}
	};

	CP.metrics.prototype.setSWID = function(swid) {
		if (swid && swid !== "null") {
			this.options.SWID = swid;
			try {
				setCookie('playspanSWID', swid);
			} catch (e) {
			}
		}
	};
	
	CP.metrics.prototype.getTRANSID = function() {
		if (transid && transid !== "null") {
			return transid;
		}
	};

	CP.metrics.prototype.setContextVariant = function(variant) {
		this.options.CONTEXT_PREFIX = variant;
		try {
			setCookie('contextVariant', variant);
		} catch (e) {
		}
	};

	CP.metrics.prototype.logTimingEvent = function(location, moreData) {
		var tag = this.options.TAG, network = this.options.NETWORK, viewNetwork = this.options.VIEW_NETWORK, appLocale = this.options.APP_LOCALE, context = this.options.CONTEXT, transid = this.options.TRANSID, data = {
			'tag' : tag,
			'network' : network,
			'view_network' : viewNetwork,
			'lang' : appLocale,
			'app_locale' : appLocale,
			'context' : context,
			'location' : location,
			'timestamp_ms' : (new Date()).getTime(),
			'transaction_id' : transid
		};
		if (moreData) {
			$.extend(true, data, moreData);
		}

		this.logEvent(data);
	};
	CP.metrics.prototype.logError = function(moreData) {
		var tag = 'error', network = this.options.NETWORK, viewNetwork = this.options.VIEW_NETWORK, appLocale = this.options.APP_LOCALE, data = {
			'tag' : tag,
			'network' : network,
			'view_network' : viewNetwork,
			'lang' : appLocale,
			'app_locale' : appLocale,
			'browser_width' : $(window).width(),
			'browser_height' : $(window).height() 
		};
		if (moreData) {
			$.extend(true, data, moreData);
		}
		this.logEvent(data);
	};

	CP.metrics.prototype.pageView = function(moreData) {
		var tag = 'pageview', network = this.options.NETWORK, viewNetwork = this.options.VIEW_NETWORK, appLocale = this.options.APP_LOCALE
		var url = window.location.pathname, transid = this.options.TRANSID, browserid = this.options.BROWSERID, data = {
			'tag' : tag,
			'network' : network,
			'view_network' : viewNetwork,
			'lang' : appLocale,
			'app_locale' : appLocale,
			'transaction_id' : transid,
			'browser_id' : browserid,
			'location' : url,
			'browser_width' : $(window).width(),
			'browser_height' : $(window).height() 
		};
		if (moreData) {
			$.extend(true, data, moreData);
		}
		this.logEvent(data);
	};
	
	CP.metrics.prototype.clickedLink = function(moreData) {
		//Only log this if referrer is not *.clubpenguin.com
		var referrerUrl =  document.referrer;
		if (referrerUrl.search(/clubpenguin/) >= 0) {
			return;
		}
		var tag = 'clicked_link', network = this.options.NETWORK, viewNetwork = this.options.VIEW_NETWORK, appLocale = this.options.APP_LOCALE
		var trackingCodeCMP = this.getQueryParam('cmp'), trackingCodeOAST = this.getQueryParam('oast'); 
		var trackingCode = "";
		//only one or the other will be set cmp = emails, oast = banners etc
		if (trackingCodeCMP) {
			trackingCode += trackingCodeCMP;
		}
		if (trackingCodeOAST) {
			trackingCode += trackingCodeOAST;
		}
		var trackUrl = window.location.href, isNewUser = (getCookie('cpvisitor') == "new" ? 1 : 0 );
		var transid = this.options.TRANSID, browserid = this.options.BROWSERID, data = {
			'tag' : tag,
			'network' : network,
			'view_network' : viewNetwork,
			'lang' : appLocale,
			'app_locale' : appLocale,
			'transaction_id' : transid,
			'browser_id' : browserid,
			'track_url' : trackUrl,
			'referrer_url' : referrerUrl,
			'is_new_url' : isNewUser,
			'tracking_code' : trackingCode,  
			'ref_id' : "" //do not know what this is referring to.
		};
		if (moreData) {
			$.extend(true, data, moreData);
		}
		this.logEvent(data);
	};
	
	CP.metrics.prototype.log = function(tag, moreData) {
		var transid = this.options.TRANSID;
		var network = this.options.NETWORK, viewNetwork = this.options.VIEW_NETWORK, appLocale = this.options.APP_LOCALE, data = {
			'tag' : tag,
			'network' : network,
			'view_network' : viewNetwork,
			'lang' : appLocale,
			'app_locale' : appLocale,
			'browser_width' : $(window).width(),
			'browser_height' : $(window).height(),
			'transaction_id' : transid
		};
		if (moreData) {
			$.extend(true, data, moreData);
		}
		this.logEvent(data);
	};

	CP.metrics.prototype.logEvent = function(data) {
		var pic, url = window.location.protocol + "//web.archive.org/web/20130130194451/http://log.data.disney.com/cp?app=" + this.options.API_APP_NAME + "&user_id=" + this.options.SWID;
		for ( var key in data) {
			if (data.hasOwnProperty(key)) {
				url += "&" + key + "=" + data[key];
			}
		}
		if (this.callbackImage) {
			pic = this.callbackImage;
		} else {
			pic = new Image();
		}
		pic.src = url;
	};

	CP.metrics.prototype.stepTime = function(funnelName, stepName, moreData) {
		this.options.TAG = 'step_timing';
		try {
			var existingFunnel = getCookie('playspanFunnelName');
			if (!this.options.CONTEXT) {
				this.options.CONTEXT = existingFunnel;
				if (!this.options.CONTEXT) {
					funnelName = this.options.CONTEXT_PREFIX + funnelName;
					setCookie('playspanFunnelName', funnelName);
					this.options.CONTEXT = funnelName;
				}
			}

			this.logTimingEvent(stepName, moreData);
			if (stepName === 'end') {
				this.reset();
			}
		} catch (e) {
		}
	};

	CP.metrics.prototype.reset = function() {
		this.initOptions();
		setCookie('playspanFunnelName', '');
		setCookie('contextVariant', '');
	};

	CP.metrics.prototype.initOptions = function() {
		this.options = {
			API_APP_NAME : 'clubpenguin',
			SWID : '-1',
			TRANSID : '-1',
			BROWSERID : '-1',
			CONTEXT : '',
			APP_LOCALE : 'en_US',
			LOCALE : 'en_US',
			NETWORK : 'c',
			VIEW_NETWORK : 'cp',
			REASON : '',
			TAG : '',
			CONTEXT_PREFIX : ''
		};
	};

	CP.metrics.prototype.track = function(pagename) {
		try {
			cto.pageName = pagename;
			cto.track();
			return true;
		} catch (e) {
			return false;
		}
	};
	
	CP.metrics.prototype.getQueryParam = function(param) {
		//escape any regex dilimeters	
		name = name.replace(/[\[]/,"\\\[").replace(/[\]]/,"\\\]");
		//find the param in the query string
	    var result =  window.location.search.match(
	        new RegExp("(\\?|&)" + param + "(\\[\\])?=([^&]*)")
	    );
	    
	    //If found return value else return false;
	    return result ? result[3] : false;
	}


})(window.jQuery);

window.jQuery(document).ready(function() {
	window.metrics = new CP.metrics();
	window.metrics.clickedLink();
	window.metrics.pageView();
});


}
/*
     FILE ARCHIVED ON 19:44:51 Jan 30, 2013 AND RETRIEVED FROM THE
     INTERNET ARCHIVE ON 18:25:41 Feb 09, 2021.
     JAVASCRIPT APPENDED BY WAYBACK MACHINE, COPYRIGHT INTERNET ARCHIVE.

     ALL OTHER CONTENT MAY ALSO BE PROTECTED BY COPYRIGHT (17 U.S.C.
     SECTION 108(a)(3)).
*/
/*
playback timings (ms):
  captures_list: 1227.795
  exclusion.robots: 0.085
  exclusion.robots.policy: 0.079
  RedisCDXSource: 17.256
  esindex: 0.007
  LoadShardBlock: 1187.093 (3)
  PetaboxLoader3.datanode: 1142.228 (4)
  CDXLines.iter: 20.218 (3)
  load_resource: 124.057
  PetaboxLoader3.resolve: 43.743
*/